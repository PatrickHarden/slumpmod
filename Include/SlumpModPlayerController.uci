var SlumpModCustomizationContent CustomizationBaseDummy;
var float InterpYaw;
var float InterpPitch;

var bool bShowDeathMessages;
var bool bPCShowHitTime;
var bool bShowHitTime;

var bool bShowGroundSpeed;

exec function ModVersion()
{
	ClientDisplayConsoleMessage("BorzoiMod Experimental Summer Roll");
}

reliable server function bool IsAdmin() {
	return WorldInfo.Game.AccessControl.IsAdmin(self) || WorldInfo.NetMode == NM_Standalone;
}

reliable server function S_AdminBroadcastMessage(string Message, optional bool bShowName=true) {
	local AOCPlayerController PC;
	foreach WorldInfo.AllControllers(class'AOCPlayerController', PC) {
		if (bShowName)
			PC.ReceiveChatMessage(AOCPRI(PlayerReplicationInfo).GetHumanReadableName()$":"@Message, EFAC_ALL, false, false, ,false);
		else
			PC.ReceiveChatMessage(Message, EFAC_ALL, false, false, ,false);
	}
}

exec function AdminBroadcastMessage(String Message) {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage(Message);
}

exec function AdminChangeTeam(String PlayerName) {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage("AdminChangeTeam "$PlayerName);
	super.AdminChangeTeam(PlayerName);
}

exec function AdminChangeTeamDamageAmount(float Amount) {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage("AdminChangeTeamDamageAmount "$Amount);
	super.AdminChangeTeamDamageAmount(Amount);
}

exec function AdminCancelVote() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage("AdminCancelVote");
	super.AdminCancelVote();
}

exec function AdminReadyAll() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage("AdminReadyAll");
	super.AdminReadyAll();
}

function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
	if (bPause) {
		bFire = 0;
		// Pause gamepad rumbling too if needed
		bResult = WorldInfo.Game.SetPause(self,CanUnpauseDelegate);
		if (bResult)
			PauseRumbleForAllPlayers();
	} else if (IsAdmin()) {
		WorldInfo.Game.ClearPause();
		// If the unpause is complete, let rumble occur
		if (WorldInfo.Pauser == None) {
			// If we did a gameplay frame pause clear it out now
			WorldInfo.bGameplayFramePause = false;

			PauseRumbleForAllPlayers(false);
		}
	}
	return bResult;
}


//quilt
//debug functions



simulated event tick(float DeltaTime)
{
	local rotator DeltaRot, ViewRotation, NewRotation;
	super.tick(DeltaTime);
	
	if (bShowGroundSpeed)
	{
		DrawDebugTextToHud(string(AOCPawn(Pawn).SprintTime) @string(AOCPawn(Pawn).StateVariables.bCanSprint), 40.0, 7.0);
		
		DrawDebugTextToHud(string(VSize(Pawn.Velocity * vect(1, 1, 0))), 40.0, 15.0);
		
		DrawDebugTextToHud("parry: " @string(AOCPawn(Pawn).StateVariables.bIsParrying), 40.0, 25.0);
	}
	
	if (Role == ROLE_SimulatedProxy)
	{
		// Calculate Delta to be applied on ViewRotation
		DeltaRot.Yaw	= 100;
		DeltaRot.Pitch	= 100;
		//DrawTextOverHead(string(DeltaRot));
		ProcessViewRotation( DeltaTime, ViewRotation, DeltaRot );
		SetRotation(ViewRotation);

		ViewShake( deltaTime );

		NewRotation = ViewRotation;
		NewRotation.Roll = Rotation.Roll;

		if ( Pawn != None )
			Pawn.FaceRotation(NewRotation, deltatime);
			SetFocalPoint(vector(NewRotation) * 1000.f + Pawn.location, false);
	}
	
}




exec function DrawParryHitbox() 
{//box parry system isn't even enabled?
	if (bDrawParryBox)
		bDrawParryBox=false;
	else
		bDrawParryBox=true;
}

/* exec function EnableParryDebug(bool b)
	{
		S_EnableParryDebug(b);
	}

reliable server function S_EnableParryDebug(bool b)
	{
		bEnableParryDebug = b;
	} */

exec function ShowMyParryBox()
{
	AOCPawn(Pawn).ParryComponent.SetMaterial(0, Material'CHV_Material_Pack.Materials.Masters.M_Water_Master');	
	AOCPawn(Pawn).ParryComponent.SetHidden(false);
}

exec function ShowOthersParryBoxes()
{
	local AOCPawn P;
	foreach Worldinfo.AllPawns(class'AOCPawn', P)
	{
		if(P != Pawn)
		{
			P.ParryComponent.SetMaterial(0, Material'CHV_Material_Pack.Materials.Masters.M_Water_Master');	
			P.ParryComponent.SetHidden(false);
		}
	}
}
exec function ShowAllParryBoxes()
{
	local AOCPawn P;
	foreach Worldinfo.AllPawns(class'AOCPawn', P)
	{
		P.ParryComponent.SetMaterial(0, Material'CHV_Material_Pack.Materials.Masters.M_Water_Master');	
		P.ParryComponent.SetHidden(false);
	}
}

/*function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
	bResult = false;
	if (bPause)
		bResult = ActualPause(CanUnpauseDelegate);
	else
		ClientDisplayConsoleMessage("Please use the command 'SlumpModUnpause' to unpause.");
	return bResult;
}

exec function SlumpModPause() {
	if (IsAdmin())
		ActualPause();
	else
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
}

exec function SlumpModUnpause() {
	if (IsAdmin() && bPaused)
		StartUnpauseCountdown();
	else if (!bPaused)
		ClientDisplayConsoleMessage("You cannot unpause at this time.");
	else
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
}

reliable server function StartUnpauseCountdown() {
	UnpauseCountdownTime = Default.UnpauseCountdownTime;
	AdminBroadcastMessage("Unpausing in...");
	CountdownTick();
	SetTimer(1.0f, true, 'CountdownTick');
}

reliable server function CountdownTick() {
	if (UnpauseCountdownTime == 0) {
		ActualUnpause();
		ClearTimer('CountdownTick');
	} else {
		AdminBroadcastMessage("    "@UnpauseCountdownTime@"...");
		UnpauseCountdownTime--;
	}
}

reliable server function bool ActualPause(delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
	bResult = false;
	if (IsAdmin() && !bPaused) {
		bFire = 0;
		// Pause gamepad rumbling too if needed
		bResult = WorldInfo.Game.SetPause(self,CanUnpauseDelegate);
		if (bResult) {
			PauseRumbleForAllPlayers();
			bPaused = true;
		}
	}
	return bResult;
}

reliable server function ActualUnpause() {
	if (IsAdmin() && bPaused) {
		WorldInfo.Game.ClearPause();
		// If the unpause is complete, let rumble occur
		if (WorldInfo.Pauser == None) {
			// If we did a gameplay frame pause clear it out now
			WorldInfo.bGameplayFramePause = false;
			PauseRumbleForAllPlayers(false);
		}
		bPaused = false;
	}
}*/

function LocalRequestJoinClass(byte inClass)
{
	Request_JoinClass(inClass);
}

exec function GetAdmins() {
	S_GetAdmins();
}

reliable server function S_GetAdmins() {
	local AOCPlayerController PC;
	ReceiveChatMessage("All admins:", EFAC_ALL, false, false, ,false);
	foreach WorldInfo.AllControllers(class'AOCPlayerController', PC) {
		if (AOCPRI(PC.PlayerReplicationInfo).bAdmin)
			ReceiveChatMessage(AOCPRI(PC.PlayerReplicationInfo).GetHumanReadableName(), EFAC_ALL, false, false, ,false);
	}
}

reliable client function NotifyTournamentWaiting(float Threshold) {
	bShowedTournamentWaitingMessage = true;
}

exec function AdminTournamentMode(optional bool bEnable = true)
{
	ClientDisplayConsoleMessage("Deprecated: use 'Admin TournamentMode' instead");
	ClientDisplayConsoleMessage("Disable: Admin TournamentMode 0");
	ClientDisplayConsoleMessage("Enable: Admin TournamentMode 1");
}

reliable server function S_AdminTournamentMode(bool bEnable) {}

reliable server function S_SendF10Message() {
	ReceiveChatMessage("You will implode in 1 second.", EFAC_ALL, false, false, ,false);
}

exec function FOV(float F) {
	if((F >= 60.0 && F <= 165.0) || PlayerReplicationInfo.bOnlySpectator) {
		DefaultFOV = F;
		DesiredFOV = DefaultFOV;

		if((F >= 60.0 && F <= 165.0) && PlayerCamera != None) {
			PlayerCamera.SetFOV( F );
			return;
		}

		if (IsLocalPlayerController()) {
			MyFOV = F;
			default.MyFOV = F;
			StaticSaveConfig();
		}
	}
}

exec function ce(optional name EventName) {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage("CauseEvent "$EventName);
	super.ce(EventName);
}

exec function CauseEvent(optional name EventName) {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminBroadcastMessage("CauseEvent "$EventName);
	super.CauseEvent(EventName);
}

exec function AdminGotoSF() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	ServerChangeMap("AOCTO-Slumforest_p");
}

exec function AdminGotoSH() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	ServerChangeMap("AOCTO-Slumpshill_p");
}

exec function AdminGotoSP() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	ServerChangeMap("AOCTO-Slumppost_p");
}

exec function AdminGotoDuel() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	ServerChangeMap("aocffa-SlumYard_p");
}

exec function AdminGotoMoor() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	ServerChangeMap("AOCLTS-Moor_p");
}

exec function AdminGotoKendo() {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	ServerChangeMap("AOCTDM-Moor_p");
}

exec function AdminForceSpectate(String PlayerName) {
	if (!PlayerReplicationInfo.bAdmin) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}
	S_AdminForceSpectate(PlayerName);
}

reliable server function S_AdminForceSpectate(String PlayerName) {
	local AOCPlayerController Target;
	local AOCAccessControl AccessControl;

	AccessControl = AOCAccessControl(WorldInfo.Game.AccessControl);

	if (!IsAdmin()) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}

	Target = AOCPlayerController(AccessControl.GetControllerFromString(PlayerName));
	if (Target == none) {
		ClientDisplayConsoleMessage("The specified player was not found.");
		return;
	}

	if(Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Agatha_King' || Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Mason_King' || AOCPRI(Target.PlayerReplicationInfo).bAdmin) {
		ClientDisplayConsoleMessage("The specified player cannot be moved to spectate.");
		return;
	}

	Target.JoinSpectatorTeam();

	S_AdminBroadcastMessage("AdminForceSpectate "$AOCPRI(Target.PlayerReplicationInfo).GetHumanReadableName());
}

exec function AdminForceSpectateAll() {
	S_AdminForceSpectateAll();
}

reliable server function S_AdminForceSpectateAll() {
	local AOCPlayerController Target;

	if (!IsAdmin()) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}

	foreach WorldInfo.AllControllers(class'AOCPlayerController', Target)
	{
		if (Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Agatha_King' ||
			Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Mason_King' ||
			Target.PlayerReplicationInfo.bAdmin
		) {
			ClientDisplayConsoleMessage("'" $ Target.PlayerReplicationInfo.GetHumanReadableName() $ "' cannot be forced to spectate.");
			continue;
		}

		Target.JoinSpectatorTeam();
	}

	S_AdminBroadcastMessage("AdminForceSpectateAll");
}

exec function Reload() {
	if(!ScriptBlockedInputs[EINBLOCK_Reload] && SlumpModWeapon_Crossbow(Pawn.Weapon) != none)
		SlumpModWeapon_Crossbow(Pawn.Weapon).ActivateReload();
}

exec function PerformAim() {
	if (class<SlumpModWeapon_Crossbow>(Pawn.Weapon.Class) != none)
		StartFire(1);
}

reliable server function ServerPerformFeint()
{
	if (Pawn.Weapon.IsInState('Active') || Pawn.Weapon.IsInState('Feint'))
		return;

	AOCPawn(Pawn).OnActionInitiated(EACT_Feint);
	AOCWeapon(Pawn.Weapon).DoFeintAttack();

	`{GAMEMODE}PRI(PlayerReplicationInfo).Feints += 1;
}

exec function ShowStats()
{
	local `{GAMEMODE}PRI PRI;

	PRI = `{GAMEMODE}PRI(PlayerReplicationInfo);

	ClientDisplayConsoleMessage("--------------------------------------------------");
	ClientDisplayConsoleMessage("--------------------------------------------------");
	ClientDisplayConsoleMessage("Score:"   @ PRI.Score);
	ClientDisplayConsoleMessage("Kills:"   @ PRI.NumKills);
	ClientDisplayConsoleMessage("Deaths:"  @ PRI.Deaths);
	ClientDisplayConsoleMessage("Assists:" @ PRI.NumAssists);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Health:");
	ClientDisplayConsoleMessage("    Regenerated:"        @ PRI.HealthRegenerated);
	ClientDisplayConsoleMessage("    Damage Received:");
	ClientDisplayConsoleMessage("        from all:"       @ PRI.AllDamageTaken);
	ClientDisplayConsoleMessage("        from enemies:"   @ PRI.DamageTaken);
	ClientDisplayConsoleMessage("        from teammates:" @ PRI.TeamDamageTaken);
	ClientDisplayConsoleMessage("    Damage Dealt:");
	ClientDisplayConsoleMessage("        to enemies:"     @ PRI.EnemyDamageDealt);
	ClientDisplayConsoleMessage("        to teammates:"   @ PRI.TeamDamageDealt);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Stamina:");
	ClientDisplayConsoleMessage("    Regenerated:"        @ PRI.StaminaRegenerated);
	ClientDisplayConsoleMessage("    Damage Received:");
	ClientDisplayConsoleMessage("        from all:"       @ PRI.AllStaminaConsumed);
	ClientDisplayConsoleMessage("        from enemies:"   @ PRI.EnemyStaminaDamageTaken);
	ClientDisplayConsoleMessage("        from teammates:" @ PRI.TeamStaminaDamageTaken);
	ClientDisplayConsoleMessage("    Damage Dealt:");
	ClientDisplayConsoleMessage("        to enemies:"     @ PRI.EnemyStaminaDamageDealt);
	ClientDisplayConsoleMessage("        to teammates:"   @ PRI.TeamStaminaDamageDealt);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Feints:" @ PRI.Feints);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Attacks:");
	ClientDisplayConsoleMessage("    Total:"      @ PRI.NumAttacks);
	ClientDisplayConsoleMessage("    Successful:" @ PRI.NumHits);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Hits:");
	ClientDisplayConsoleMessage("    Melee:"       @ PRI.MeleeHits);
	ClientDisplayConsoleMessage("    Projectile:"  @ PRI.ProjectileHits);
	ClientDisplayConsoleMessage("    Light Shove:" @ PRI.LightShoveHits);
	ClientDisplayConsoleMessage("    Heavy Shove:" @ PRI.HeavyShoveHits);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Parries:" @ PRI.Parries);
	ClientDisplayConsoleMessage("Blocks:"  @ PRI.Blocks);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Crouches:" @ PRI.Crouches);
	ClientDisplayConsoleMessage("Jumps:"    @ PRI.Jumps);
	ClientDisplayConsoleMessage("Dodges:"   @ PRI.Dodges);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Objective Points:" @ PRI.ObjPoints);
	ClientDisplayConsoleMessage("");
	ClientDisplayConsoleMessage("Decapitations:"    @ PRI.NumDecaps);
	ClientDisplayConsoleMessage("Chatter:"    @ PRI.Chatter);
	ClientDisplayConsoleMessage("--------------------------------------------------");
	ClientDisplayConsoleMessage("--------------------------------------------------");
}

reliable client function OverrideVoteText(optional string Primary, optional string Secondary)
{
	AOCBaseHUD(myHUD).HUD.MainHUD.VotePrimaryTitle.SetText(Primary);
	AOCBaseHUD(myHUD).HUD.MainHUD.VoteSecondaryTitle.SetText(Secondary);
}

exec function VoteTournamentMode(bool bEnable)
{
	ServerVoteTournamentMode(bEnable);
}

reliable server function ServerVoteTournamentMode(bool bEnable)
{
	`{GAMEMODE} (WorldInfo.Game).InitiateVoteTournamentMode(self, bEnable);
}

exec function VoteRankedMode(bool bEnable)
{
	ServerVoteRankedMode(bEnable);
}

reliable server function ServerVoteRankedMode(bool bEnable)
{
	`{GAMEMODE} (WorldInfo.Game).InitiateVoteRankedMode(self, bEnable);
}
exec function VoteRankedTeamSize(int Size)
{
	ServerVoteRankedTeamSize(Size);
}

reliable server function ServerVoteRankedTeamSize(int Size)
{
	`{GAMEMODE} (WorldInfo.Game).InitiateVoteRankedTeamSize(self, Size);
}

exec function VoteRestartMapAfterEndGame(bool bEnable)
{
	ServerVoteRestartMapAfterEndGame(bEnable);
}

reliable server function ServerVoteRestartMapAfterEndGame(bool bEnable)
{
	`{GAMEMODE} (WorldInfo.Game).InitiateVoteRestartMapAfterEndGame(self, bEnable);
}

function DrawTextOverHead(string DebugText)
{
	local color tcolor;
	tcolor.G = 0;
	FlushDebugStrings();
	DrawDebugString(Vect(0, 0, 85.0), DebugText, Pawn, tcolor); //off for now
}

function bool IsSprintAngle(int fInputAngle) //checks if the player should be allowed to sprint or not
{
	//DrawTextOverHead(string(fInputAngle));
	return ((fInputAngle < 25070) && (fInputAngle > 7694)); //24576, 8192, //27079 and 7892 work but i'm loosening them slightly so that controller players can sprint at 45 degrees more consistently
}

// Player movement.
// Player Standing, walking, running, falling.
state PlayerWalking
{
	//This doesn't do anything besides add an extra function call to the stack and should probably be deleted.
	//Calling the ProcessMove function without this would automatically call the function in the parent class.
	//If someone else sees this and agrees, delete it.  If I'm missing something, then /slap Eric
	//In the mean time, I commented it out.
	
	function ProcessMove(float DeltaTime, vector NewAccel, eDoubleClickDir DoubleClickMove, rotator DeltaRot)
	{
		super.ProcessMove(DeltaTime, NewAccel, DoubleClickMove, DeltaRot);
	}
	/*
	function ProcessMove(float DeltaTime, vector NewAccel, eDoubleClickDir DoubleClickMove, rotator DeltaRot)
	{
		if( Pawn == None )
		{
			return;
		}

		if (Role == ROLE_Authority)
		{
			// Update ViewPitch for remote clients
			Pawn.SetRemoteViewPitch( Rotation.Pitch );
		}

		Pawn.Acceleration = NewAccel;

		CheckJumpOrDuck();
	}
	*/

	function PlayerMove( float DeltaTime )
	{
		local vector			X,Y,Z, NewAccel;
		local eDoubleClickDir	DoubleClickMove;
		local rotator			OldRotation;
		local bool				bSaveJump;
		local bool              bLastMoveForward;

		if( Pawn == None )
		{
			GotoState('Dead');
		}
		else
		{
			GetAxes(Pawn.Rotation,X,Y,Z);

			InputDirection.X = PlayerInput.aStrafe;
			InputDirection.Y = PlayerInput.aForward;
			InputDirection.Z = 0.f;
			
			bLastMoveForward = bMoveForward;
			
			bMoveBackward = PlayerInput.aForward < 0.0f;
			bMoveForward = (PlayerInput.aForward > 0.0f);
			
			bMoving = PlayerInput.aForward != 0.0f || PlayerInput.aStrafe != 0.0f;
			
			if (!IsSprintAngle(rotator(InputDirection).Yaw) && bMoveForward)
			{
				if (InputDirection.X > 0.0)
			{
			InputDirection.X = 0.71;
			InputDirection.Y = 0.71;
			}
			else
			{
			InputDirection.X = -0.71;
			InputDirection.Y = 0.71;
			}
			}
			
			
			
			
			
			if (Role != ROLE_Authority || WorldInfo.NetMode == NM_Standalone || (Worldinfo.NetMode == NM_ListenServer && IsLocalPlayerController()))
			{
				if ((bLastMoveForward && !bMoveForward) || (bLastMoveForward && !IsSprintAngle(rotator(InputDirection).Yaw)))
				{
					AOCPawn(Pawn).DisableSprint(true);
				}
			}
			
			// Update acceleration.
			NewAccel = Vect(0,0,0);
			if(!ScriptBlockedInputs[EINBLOCK_MoveBackward] && bMoveBackward
				|| !ScriptBlockedInputs[EINBLOCK_MoveForward] && bMoveForward )
			{
				NewAccel += PlayerInput.aForward*X;
			}
			
			if(!ScriptBlockedInputs[EINBLOCK_MoveLeft] && PlayerInput.aStrafe < 0.0f
				|| !ScriptBlockedInputs[EINBLOCK_MoveRight] && PlayerInput.aStrafe > 0.0f )
			{
				if (AOCPawn(Pawn).StateVariables.bIsSprinting)
					NewAccel += PlayerInput.aStrafe*Y * 0.5f;
				else
					NewAccel += PlayerInput.aStrafe*Y;
			}
			
			NewAccel.Z	= 0;
			NewAccel = Pawn.AccelRate * Normal(NewAccel);
			NewAccel = NewAccel;
			// NewAccel is max when we're walking, limit it slightly when we're in the air whatever
			if (Pawn.Physics != PHYS_Walking)
				NewAccel *= 0.25f;
				
			if(ScriptBlockedInputs[EINBLOCK_Dodge])
			{	
				DoubleClickMove = DCLICK_None;
			}
			else
			{
				DoubleClickMove = PlayerInput.CheckForDoubleClickMove( DeltaTime/WorldInfo.TimeDilation );
			}

			// Update rotation.
			OldRotation = Rotation;
			//DrawTextOverHead(string(OldRotation));
			InterpYaw = Rotation.Yaw;
			InterpPitch = Rotation.Pitch;
			if (AOCPawn(Pawn).PawnState != ESTATE_PUSH && !bForceIgnoreRotation)
				UpdateRotation( DeltaTime * AOCPawn(Pawn).ModAnimRate ); //update rotation !!!!!!!!!!!!!!! importantttttttttttttttttttttttttttttttttttttttttttttttttttttt!!!!!!!!!!!!!!!!!!!!!!!!!!!
			bDoubleJump = false;
			bPressedJump = bPressedJump && !ScriptBlockedInputs[EINBLOCK_Jump];
			if( bPressedJump && Pawn.CannotJumpNow() )
			{
				bSaveJump = true;
				bPressedJump = false;
			}
			else
			{
				bSaveJump = false;
			}
			if( Role < ROLE_Authority ) // then save this move and replicate it
			{
				ReplicateMove(DeltaTime, NewAccel, DoubleClickMove, OldRotation - Rotation);
			}
			else
			{
				ProcessMove(DeltaTime, NewAccel, DoubleClickMove, OldRotation - Rotation);
			}
			bPressedJump = bSaveJump;		
		}
	}
}

//
//debugging interpolation
//
function UpdateRotation( float DeltaTime )
{
	local Rotator	DeltaRot, newRotation, ViewRotation;
	local Rotator DesiredRot;

	ViewRotation = Rotation;
	if (Pawn!=none)
	{
		Pawn.SetDesiredRotation(ViewRotation);
	}
	
	if(LookAtTarget != none)
	{
		if(AOCPawn(LookAtTarget) == none)
		{
			DesiredRot = (ViewRotation - AOCPawn(Pawn).GetViewRotation()) + Rotator(LookAtTarget.Location - AOCPawn(Pawn).GetPawnViewLocation());
		}
		else
		{
			//Look at Pawn's heads
			DesiredRot = (ViewRotation - AOCPawn(Pawn).GetViewRotation()) + Rotator(AOCPawn(LookAtTarget).GetPawnViewLocation() - AOCPawn(Pawn).GetPawnViewLocation());
		}
		ViewRotation = RInterpTo(ViewRotation, DesiredRot, DeltaTime, fLookAtRate); //what does this do? ~~~~~~~~~~~~~~~~~~~~ //
		if(RDiff(ViewRotation, DesiredRot) ~= 0)
		{
			LookAtTarget = none;

			OnTurnTowardTargetComplete(self);
		}
	}
	
	// Calculate Delta to be applied on ViewRotation
	DeltaRot.Yaw	= PlayerInput.aTurn;
	DeltaRot.Pitch	= PlayerInput.aLookUp;
	//DrawTextOverHead(string(DeltaRot));
	ProcessViewRotation( DeltaTime, ViewRotation, DeltaRot );
	SetRotation(ViewRotation);

	ViewShake( deltaTime );

	NewRotation = ViewRotation;
	NewRotation.Roll = Rotation.Roll;

	if ( Pawn != None )
		Pawn.FaceRotation(NewRotation, deltatime);
}
/* 
function UpdateRotation( float DeltaTime ) //temp
{
	local Rotator	DeltaRot, newRotation, ViewRotation;
	local Rotator DesiredRot;

	ViewRotation = Rotation;
	if (Pawn!=none)
	{
		Pawn.SetDesiredRotation(ViewRotation);
	}
	
	DeltaRot.Yaw	= InterpYaw;
	DeltaRot.Pitch	= InterpPitch;
	ProcessViewRotation( DeltaTime, ViewRotation, DeltaRot );
	
	SetRotation(ViewRotation);
	
	
	
	SetFocalPoint(vector(ViewRotation) * 1000.f + Pawn.Location, false); //this is so hacky i hate it but pitch doesn't work otherwise.......
	
	
	NewRotation = ViewRotation;
	NewRotation.Roll = Rotation.Roll; //bisplayer
	
	if ( Pawn != None )
		Pawn.FaceRotation(NewRotation, DeltaTime); //this rotates pawn yaw, pitch isn't changed because it's the pawn
}
 */

//death messages
exec function ToggleDeathMessages() //toggles dying messages in console
{
	if (bShowDeathMessages){
		bShowDeathMessages = false;
		ClientDisplayConsoleMessage("death messages off");
	}
	else {
		bShowDeathMessages = true;
		ClientDisplayConsoleMessage("death messages on");
	}
}

exec function EnableDeathMessages() //toggles dying messages in console
{
	bShowDeathMessages = true;
	ClientDisplayConsoleMessage("death messages on");
	
}

exec function DisableDeathMessages() //toggles dying messages in console
{
	bShowDeathMessages = false;
	ClientDisplayConsoleMessage("death messages off");
}

simulated function PrintAndClearConsoleDamage()
{
	local int i;
	
	if(!bShowDamageOnConsole || VerboseDamageMessages.Length <= 0)
	{
		return;
	}
	
	if (bShowDeathMessages == false)
	{
		return;
	}
	
	if(bShowVerboseDamageMessagesOnConsole)
	{
		ClientDisplayConsoleMessage("-------------------");
		ClientDisplayConsoleMessage("Last life recap:");
		ClientDisplayConsoleMessage("");

		for(i = 0; i < VerboseDamageMessages.Length; ++i)
		{
			ClientDisplayConsoleMessage(VerboseDamageMessages[i]);
		}
		ClientDisplayConsoleMessage("-------------------");
	}
	else
	{
		ClientDisplayConsoleMessage("-------------------");
		ClientDisplayConsoleMessage("Last life recap:");
		ClientDisplayConsoleMessage("");

		if(RecordedDamageDealt.Length > 0)
		{
			ClientDisplayConsoleMessage("Damage dealt:");
			ClientDisplayConsoleMessage("");

			for(i = 0; i < RecordedDamageDealt.Length; ++i)
			{
				ClientDisplayConsoleMessage(RecordedDamageDealt[i].Damage@"damage dealt to"@GetPriOrActorName(RecordedDamageDealt[i].Other)@"in"@RecordedDamageDealt[i].Hits@"hits");
			}
			if(RecordedDamageTaken.Length > 0)
			{
				ClientDisplayConsoleMessage("");
			}
		}
		if(RecordedDamageTaken.Length > 0)
		{
			ClientDisplayConsoleMessage("Damage received:");
			ClientDisplayConsoleMessage("");

			for(i = 0; i < RecordedDamageTaken.Length; ++i)
			{
				ClientDisplayConsoleMessage(RecordedDamageTaken[i].Damage@"damage taken from"@GetPriOrActorName(RecordedDamageTaken[i].Other)@"in"@RecordedDamageTaken[i].Hits@"hits");
			}
		}

		ClientDisplayConsoleMessage("-------------------");
	}

	VerboseDamageMessages.Remove(0, VerboseDamageMessages.Length);
	RecordedDamageDealt.Remove(0, RecordedDamageDealt.Length);
	RecordedDamageTaken.Remove(0, RecordedDamageTaken.Length);
}

exec function ToggleReleaseHitMessage() //toggles messages that show how far into release you hit your opponent
{
	if (bPCShowHitTime){
		SlumpModPawn(Pawn).Set_bShowHitTime(true);
		ClientDisplayConsoleMessage("release hit time messages off");
	}
	else {
		SlumpModPawn(Pawn).Set_bShowHitTime(false);
		ClientDisplayConsoleMessage("release hit time messages on");
	}
}
// this is dumb, just let ppl set it
exec function EnableReleaseHitMessage() //toggles messages that show how far into release you hit your opponent
{
	SlumpModPawn(Pawn).Set_bShowHitTime(true);
	ClientDisplayConsoleMessage("release hit time messages on");
}

exec function DisableReleaseHitMessage() //toggles messages that show how far into release you hit your opponent
{
	SlumpModPawn(Pawn).Set_bShowHitTime(true);
	ClientDisplayConsoleMessage("release hit time messages off");
}

exec function aoc_DrawTracerHitDetails( bool draw )
	{
		bDrawWeaponTracers = draw;
		bDrawTracerHitDetails = draw;
	}

/* exec function ShowTraceReach()
	{
		AOCBaseHUD(myHUD).bDebugReach = !AOCBaseHUD(myHUD).bDebugReach;
	} */

exec function ShowGroundSpeed(bool set)
{
	bShowGroundSpeed = set;
}


function DrawDebugTextToHud(string DebugText, float func_xpos, float func_ypos)
{
	local color tcolor;
	//tcolor = (255, int(Sin(WorldInfo.TimeSeconds)), int(Sin(WorldInfo.TimeSeconds + 15.0)));
	//tcolor = (255, 255, 255);
	tcolor.r = int(Sin(WorldInfo.TimeSeconds));
	tcolor.g = int(Sin(WorldInfo.TimeSeconds * 0.9 + 15.0));
	tcolor.b = int(Sin(WorldInfo.TimeSeconds * 1.1 + 25.0));
	tcolor.a = 255;
	
	AOCBaseHUD(myHUD).Canvas.Font = Font'AOC_UI_Common.DescriptionFont';
	AOCBaseHUD(myHUD).Canvas.DrawColor = tcolor;
	
	AOCBaseHUD(myHUD).Canvas.SetPos(AOCBaseHUD(myHUD).Canvas.SizeX - func_xpos, AOCBaseHUD(myHUD).Canvas.SizeY - func_ypos * AOCBaseHUD(myHUD).Canvas.Font.GetMaxCharHeight() );
	AOCBaseHUD(myHUD).Canvas.DrawText(DebugText, true);
	
	//AOCPlayerController(myCombatTarget.Controller).Announce(DebugText);
}

//release


exec function GetServerTickTime()
{
	ServerGetServerTickTime();
}

reliable server function ServerGetServerTickTime()
{
	if(PlayerReplicationInfo.bAdmin)
	{
		ClientDisplayConsoleMessage(GetWorldTickTime());
	}
}

exec function StartPollingServerTickTime()
{
	if(!bPollingServerTickTime)
	{
		ServerStartPollingServerTickTime();
		bPollingServerTickTime = true;
	}
}

reliable server function ServerStartPollingServerTickTime()
{
	if(Worldinfo.Game.AccessControl.IsAdmin(self))
	{
		SetTimer(1.0f, true, 'UpdateServerTickTime');
	}
}

function UpdateServerTickTime()
{
	ClientUpdateServerTickTime(GetWorldTickTime());
	ClientUpdateServerRelevancyBonus(GetAlwaysRelevantBonus());
}

unreliable client function ClientUpdateServerTickTime(float time)
{
	ServerTickMs = 	time;
	bPollingServerTickTime = true;
}

unreliable client function ClientUpdateServerRelevancyBonus(float bonus)
{
	ServerRelBonus = bonus;
}


DefaultProperties
{
	NetUpdateFrequency=200
	suicideDelay = 1.0f
	CustomizationClass=class'SlumpModCustomization'
	bShowDeathMessages = true
}
